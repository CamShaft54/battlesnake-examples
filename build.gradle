plugins {
  id 'application'
  id 'java'
  id 'org.jetbrains.kotlin.jvm' version '1.3.61'
  id "com.github.ben-manes.versions" version "0.27.0"
  id 'com.github.johnrengelman.shadow' version '5.2.0'
}

allprojects {
  repositories {
    maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
    jcenter()
    // Do not place this any higher in the order
    // You will pick up a bad version of io.github.microutils:kotlin-logging
    maven { url 'https://jitpack.io' }
  }
}

def jdkVersion = System.getProperty('java.version')
def slf4jVersion = '1.7.28'
def loggingVersion = '1.7.8'
def quickstartVersion = '0.2.10'

def appName = 'snake'

// Update this value to change the snake you want to run in the uberjar
def mainName = 'io.battlesnake.examples.kotlin.PerimeterSnake'

sourceCompatibility = 1.8

description = appName
group = 'io.battlenake'
version = '0.1.0'

dependencies {
  implementation platform('org.jetbrains.kotlin:kotlin-bom')

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  implementation "com.github.pambrose:battlesnake-quickstart:${quickstartVersion}"
  implementation "io.github.microutils:kotlin-logging:${loggingVersion}"
  implementation "org.slf4j:slf4j-simple:${slf4jVersion}"
}

startScripts.enabled = false

// This determines the main() executed with ./gradlew run
application {
  mainClassName = mainName
  //applicationDefaultJvmArgs = ['-DPORT=8080']
}

// This task creates the shell scripts to run the app
task simpleSnake(type: CreateStartScripts) {
  mainClassName = mainName
  applicationName = appName
  outputDir = new File(project.buildDir, 'tmp')
  classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
  from(simpleSnake)
  fileMode = 0755
}

// Include build uberjars in heroku deploy
task stage(dependsOn: ['uberjar', 'build', 'clean'])
build.mustRunAfter clean

shadowJar {
  mergeServiceFiles()
}

task uberjar(type: Jar, dependsOn: shadowJar) {
  archiveFileName = 'snake.jar'
  manifest {
    attributes('Implementation-Title': appName)
    attributes('Implementation-Version': version)
    attributes('Built-Date': new Date())
    attributes('Built-JDK': jdkVersion)
    attributes('Main-Class': mainName)
  }
  from zipTree(shadowJar.archiveFile)
}

compileKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

test {
  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams = true
  }
}